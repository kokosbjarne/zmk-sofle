#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    SandS: SandS {
        compatible = "zmk,behavior-hold-tap";
        label = "SANDS";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "hold-preferred";
        retro-tap;
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | BKSPC |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   Å   |
// | SHIFT |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   Ö   |   Ä   |
// | LCTRL |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp ESCAPE         &kp 1  	 &kp 2	    &kp 3           &kp 4                    &kp 5          &none            &kp 6          &kp 7                 	  &kp 8            &kp 9      &kp 9          &kp BACKSPACE
&kp TAB            &kp Q         &kp W      &kp E           &kp R                    &kp T          &none            &kp Y          &kp U                         &kp I            &kp O      &kp P          &kp LBKT
&kp LSHIFT         &kp A         &kp S      &kp D           &kp F                    &kp G          &none            &kp H          &kp J                         &kp K            &kp L      &kp SEMI       &kp SQT
&kp LA(LC(LSHFT))  &kp Z         &kp X      &kp C           &kp V                    &kp B          &none            &kp N          &kp M                    	  &kp COMMA        &kp PERIOD &kp MINUS      &kp RC(RA(RIGHT_SHIFT))
&kp LEFT_GUI       &kp LEFT_ALT  &kp CTRL   &mo 1           &lt ENTER     &SandS LEFT_SHIFT SPACE	&mo2        &CTRL   	&kp RIGHT_ALT  		  &kp RIGHT_GUI      &none  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "mac-base";
        };

        layer_1 {
            display-name = "win-base";
            bindings = <
&none                   &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LCTRL                &kp TAB        &kp C_PLAY            &kp TAB        &kp RCTRL                     &kp RIGHT_SHIFT  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp DELETE
&none                   &kp F         &kp P         &kp D           &kp L                    &kp X          &kp LS(LG(NUMBER_2))  &kp SEMICOLON  &kp U                         &kp O            &kp Y          &kp Q          &none
&mo 5                   &kp S         &kp N         &kp T           &kp H                    &kp K          &kp C_PREVIOUS        &kp COMMA      &kp A                         &kp E            &kp I          &kp C          &mo 5
&kp LA(LC(LEFT_SHIFT))  &kp V         &kp W         &kp G           &kp M                    &kp J          &kp C_NEXT            &kp MINUS      &kp PERIOD                    &kp SQT          &kp EQUAL      &kp FSLH       &kp RA(RC(RIGHT_SHIFT))
&kp C_MUTE              &mkp MB1      &kp Z         &kp R           &SandS LEFT_SHIFT SPACE  &lt 4 ENTER    &to 0                 &lt 4 ESCAPE   &SandS RIGHT_SHIFT BACKSPACE  &kp B            &kp GRAVE      &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&none            &none  &none     &none         &none              &none                   &rgb_ug RGB_HUD  &none                  &none          &none    &none    &none    &none
&none            &none  &none     &kp UP_ARROW  &kp DOUBLE_QUOTES  &kp LEFT_BRACE          &bt BT_CLR       &kp RIGHT_BRACE        &kp F9         &kp F10  &kp F11  &kp F12  &none
&none            &none  &kp LEFT  &kp DOWN      &kp RIGHT          &kp LEFT_PARENTHESIS    &bt BT_PRV       &kp RIGHT_PARENTHESIS  &kp F5         &kp F6   &kp F7   &kp F8   &none
&none            &none  &none     &none         &none              &kp LEFT_BRACKET        &bt BT_NXT       &kp RIGHT_BRACKET      &kp F1         &kp F2   &kp F3   &kp F4   &none
&kp LG(LS(F14))  &none  &none     &none         &none              &none                   &rgb_ug RGB_TOG  &none                  &kp BACKSPACE  &none    &none    &none
            >;

            sensor-bindings = <&inc_dec_kp LA(LG(F13)) RG(F13)>;
            label = "SP&Fn";
        };

        layer_5 {
            bindings = <
&none                 &none  &none            &none            &none            &kp TAB             &none  &kp TAB           &none            &kp LS(NUMBER_4)  &kp LS(NUMBER_6)  &kp SLASH     &none
&kp LS(LC(LEFT_ALT))  &none  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SLASH)       &none  &kp LS(N5)        &kp KP_NUMBER_7  &kp KP_NUMBER_8   &kp KP_NUMBER_9   &kp ASTERISK  &none
&none                 &none  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(NUMBER_1)    &none  &kp LS(N7)        &kp KP_NUMBER_4  &kp KP_NUMBER_5   &kp KP_NUMBER_6   &kp MINUS     &none
&kp LS(LEFT_ALT)      &none  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LS(NUMBER_2)    &none  &kp LS(NUMBER_3)  &kp KP_NUMBER_1  &kp KP_NUMBER_2   &kp KP_NUMBER_3   &kp PLUS      &none
&none                 &none  &none            &kp KP_NUMBER_0  &kp SPACE        &kp RETURN          &none  &kp ESCAPE        &kp BACKSPACE    &kp KP_NUMBER_0   &none             &kp KP_DOT
            >;

            label = "number";
            sensor-bindings = <&scroll_encoder>;
        } ;
    };
};
